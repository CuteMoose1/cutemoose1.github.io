#include <stdio.h>
#include <string.h>

// Function to check if the character is an operator
int isOperator(char c)
{
	return (!isalpha(c) && !isdigit(c));
}

// Function to get the priority of operators
int getPriority(char C)
{
	if (C == '-' || C == '+')
		return 1;
	else if (C == '*' || C == '/')
		return 2;
	else if (C == '^')
		return 3;
	return 0;
}

// Function to convert the infix expression to postfix
char* infixToPostfix(char* infix)
{
	int l = strlen(infix);
	char char_stack[l];
	int top = -1;
	char* output = (char*)malloc(l * sizeof(char));

	for (int i = 0; i < l; i++) {

		// If the scanned character is an operand, add it to output.
		if (isalpha(infix[i]) || isdigit(infix[i]))
			strncat(output, &infix[i], 1);

		// If the scanned character is an ‘(‘, push it to the stack.
		else if (infix[i] == '(')
			char_stack[++top] = '(';

		// If the scanned character is an ‘)’, pop and output from the stack
		// until an ‘(‘ is encountered.
		else if (infix[i] == ')') {
			while (char_stack[top] != '(') {
				strncat(output, &char_stack[top--], 1);
			}

			// Remove '(' from the stack
			top--;
		}

		// Operator found
		else {
			if (isOperator(char_stack[top])) {
				if (infix[i] == '^') {
					while (getPriority(infix[i]) <= getPriority(char_stack[top])) {
						strncat(output, &char_stack[top--], 1);
					}
				}
				else {
					while (getPriority(infix[i]) < getPriority(char_stack[top])) {
						strncat(output, &char_stack[top--], 1);
					}
				}

				// Push current Operator on stack
				char_stack[++top] = infix[i];
			}
		}
	}
	while (top >= 0) {
		strncat(output, &char_stack[top--], 1);
	}
	return output;
}

// Function to convert infix to prefix notation
char* infixToPrefix(char* infix)
{
	// Reverse String and replace ( with ) and vice versa
	// Get Postfix
	// Reverse Postfix
	int l = strlen(infix);

	// Reverse infix
	for (int i = 0, j = l - 1; i < j; i++, j--) {
		char temp = infix[i];
		infix[i] = infix[j];
		infix[j] = temp;
	}

	// Replace ( with ) and vice versa
	for (int i = 0; i < l; i++) {
		if (infix[i] == '(') {
			infix[i] = ')';
		}
		else if (infix[i] == ')') {
			infix[i] = '(';
		}
	}

	char* postfix = infixToPostfix(infix);

	// Reverse postfix
	l = strlen(postfix);
	for (int i = 0, j = l - 1; i < j; i++, j--) {
		char temp = postfix[i];
		postfix[i] = postfix[j];
		postfix[j] = temp;
	}

	return postfix;
}

// Driver code
int main()
{
	char infix[] = "x+y*z/w+u";

	// Function call
	char* prefix = infixToPrefix(infix);
	printf("%s\n", prefix);
	free(prefix);
	return 0;
}
