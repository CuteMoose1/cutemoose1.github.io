#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *create_node(int data) {
    struct node *new_node = malloc(sizeof(struct node));
    new_node->data = data;
    new_node->next = NULL;

    return new_node;
}

void insert_node_at_beginning(struct node **head, int data) {
    struct node *new_node = create_node(data);

    if (*head == NULL) {
        *head = new_node;
        new_node->next = *head;
    } else {
        struct node *current_node = *head;
        while (current_node->next != *head) {
            current_node = current_node->next;
        }
        new_node->next = *head;
        current_node->next = new_node;
        *head = new_node;
    }
}

void insert_node_at_end(struct node **head, int data) {
    struct node *new_node = create_node(data);

    if (*head == NULL) {
        *head = new_node;
        new_node->next = *head;
    } else {
        struct node *current_node = *head;
        while (current_node->next != *head) {
            current_node = current_node->next;
        }
        current_node->next = new_node;
        new_node->next = *head;
    }
}

void insert_node_at_position(struct node **head, int data, int position) {
    if (position <= 0) {
        printf("Invalid position\n");
        return;
    }

    if (*head == NULL) {
        if (position == 1) {
            insert_node_at_beginning(head, data);
        } else {
            printf("Invalid position\n");
        }
    } else {
        struct node *new_node = create_node(data);
        struct node *current_node = *head;
        int count = 1;

        while (count < position - 1 && current_node->next != *head) {
            current_node = current_node->next;
            count++;
        }

        if (count == position - 1) {
            new_node->next = current_node->next;
            current_node->next = new_node;
        } else if (current_node->next == *head && position == count + 1) {
            current_node->next = new_node;
            new_node->next = *head;
        } else {
            printf("Invalid position\n");
        }
    }
}

void delete_node_from_beginning(struct node **head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct node *temp = *head;
    struct node *current_node = *head;

    while (current_node->next != *head) {
        current_node = current_node->next;
    }

    if (*head == current_node) {
        *head = NULL;
    } else {
        *head = (*head)->next;
        current_node->next = *head;
    }

    free(temp);
}

void delete_node_from_end(struct node **head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct node *current_node = *head;
    struct node *prev_node = NULL;

    while (current_node->next != *head) {
        prev_node = current_node;
        current_node = current_node->next;
    }

    if (*head == current_node) {
        *head = NULL;
    } else {
        prev_node->next = *head;
    }

    free(current_node);
}

void delete_node_from_position(struct node **head, int position) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    if (position <= 0) {
        printf("Invalid position\n");
        return;
    }

    struct node *current_node = *head;
    struct node *prev_node = NULL;
    int count = 1;

    while (count < position && current_node->next != *head) {
        prev_node = current_node;
        current_node = current_node->next;
        count++;
    }

    if (count == position) {
        if (*head == current_node) {
            *head = (*head)->next;
            if (*head == current_node) {
                *head = NULL;
            }
        } else {
            prev_node->next = current_node->next;
        }

        free(current_node);
    } else {
        printf("Invalid position\n");
    }
}

int get_length(struct node *head) {
    if (head == NULL) {
        return 0;
    }

    struct node *current_node = head;
    int length = 0;

    do {
        length++;
        current_node = current_node->next;
    } while (current_node != head);

    return length;
}

void reverse_list(struct node **head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct node *prev_node = NULL;
    struct node *current_node = *head;
    struct node *next_node;

    do {
        next_node = current_node->next;
        current_node->next = prev_node;
        prev_node = current_node;
        current_node = next_node;
    } while (current_node != *head);

    (*head)->next = prev_node;
    *head = prev_node;
}

void print_node(struct node *head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct node *current_node = head;
    do {
        printf("%d ", current_node->data);
        current_node = current_node->next;
    } while (current_node != head);
    printf("\n");
}

int main() {
    int n;
    printf("Enter the number of nodes : ");
    scanf("%d", &n);

    int data;
    struct node *head = NULL;

    for (int i = 0; i < n; i++) {
        printf("Enter the data : ");
        scanf("%d", &data);
        insert_node_at_end(&head, data);
    }

    printf("Circular Linked List\n");
    print_node(head);
    printf("\n");

    int choice;
    int position;

    while (1) {
        printf("Choose an operation:\n");
        printf("1. Insertion at beginning\n");
        printf("2. Insertion at end\n");
        printf("3. Insertion at specific position\n");
        printf("4. Deletion from beginning\n");
        printf("5. Deletion from end\n");
        printf("6. Deletion from specific position\n");
        printf("7. Find the length of the linked list\n");
        printf("8. Reverse the linked list\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                insert_node_at_beginning(&head, data);
                printf("Circular Linked List\n");
                print_node(head);
                break;
            case 2:
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                insert_node_at_end(&head, data);
                printf("Circular Linked List\n");
                print_node(head);
                break;
            case 3:
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                printf("Enter the position: ");
                scanf("%d", &position);
                insert_node_at_position(&head, data, position);
                printf("Circular Linked List\n");
                print_node(head);
                break;
            case 4:
                delete_node_from_beginning(&head);
                printf("Circular Linked List\n");
                print_node(head);
                break;
            case 5:
                delete_node_from_end(&head);
                printf("Circular Linked List\n");
                print_node(head);
                break;
            case 6:
                printf("Enter the position: ");
                scanf("%d", &position);
                delete_node_from_position(&head, position);
                printf("Circular Linked List\n");
                print_node(head);
                break;
            case 7:
                printf("Length of the linked list: %d\n", get_length(head));
                break;
            case 8:
                reverse_list(&head);
                printf("Reversed Circular Linked List\n");
                print_node(head);
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid choice\n");
        }

        printf("\n");
    }

    return 0;
}
